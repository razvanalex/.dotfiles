#!/bin/bash

DOTFILES_REPO="https://github.com/razvanalex/.dotfiles.git"
# Set up fonts path based on OS
if [[ "$(uname -s)" == "Darwin" ]]; then
    # macOS uses ~/Library/Fonts for user fonts
    FONTS_PATH="$HOME/Library/Fonts"
else
    # Linux typically uses ~/.local/share/fonts
    FONTS_PATH="$HOME/.local/share/fonts"
fi
OMZ_PATH="$HOME/.oh-my-zsh"
TPM_PATH="$HOME/.tmux/plugins/tpm"
FZF_PATH="$HOME/.fzf"
DOTFILES_PATH="$HOME/.dotfiles"

# Usage: log level message
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date +'%d-%m-%y %H:%M:%S.%3N')

    declare -A LOG_COLORS
    LOG_COLORS["DEBUG"]="\e[94m"       # Blue
    LOG_COLORS["INFO"]="\e[92m"        # Green
    LOG_COLORS["WARN"]="\e[93m"        # Yellow
    LOG_COLORS["ERROR"]="\e[91m"       # Red
    LOG_COLORS["CRITICAL"]="\e[1;91m"  # Bold Red
    RESET_COLOR="\e[0m"

    level=${LOG_COLORS[$level]}${level}${RESET_COLOR}

    echo -e "[$timestamp][${level}]: $message"
}

# Usage: log_critical message
log_critical() {
    local message=$1
    log CRITICAL "$message"
}

# Usage: log_error message
log_error() {
    local message=$1
    log ERROR "$message"
}

# Usage: log_warn message
log_warn() {
    local message=$1
    log WARN "$message"
}

# Usage: log_info message
log_info() {
    local message=$1
    log INFO "$message"
}

# Usage: log_debug message
log_debug() {
    local message=$1
    log DEBUG "$message"
}

# Kills the installed on error
die_on_error() {
    local rc=$?
    local msg=$1

    if [ $rc -ne 0 ]; then
        log_error "installation failed: $1"
        exit $rc
    fi
}

# Log error if command failed
log_if_failed() {
    local rc=$?
    local msg=$1

    if [ $rc -ne 0 ]; then
        log_error "command failed: $msg"
    fi
}

clone_or_pull() {
    local repo=$1
    local path=$2

    if [ ! -d "$path" ]; then
        git clone "$repo" "$path"
        die_on_error "failed to clone $repo to $path"
    else
        (cd "$path" && git pull)
        log_if_failed "repo $repo update failed"
    fi
}

# Install packages for Ubuntu systems.
install_ubuntu_packages() {
    local apt_packages=(
        trash-cli
        ripgrep
        git
        gcc
        make
        zsh
        wget
        curl
        htop
        stow
        nvim
    )
    
    if [ -z "${DISABLE_TMUX+x}" ]; then
        apt_packages+=(tmux)
    fi

    sudo add-apt-repository ppa:neovim-ppa/unstable

    sudo apt update && \
    sudo apt install -y "${apt_packages[@]}" && \

    log_if_failed "failed installing packages"

    sudo chsh -s "$(which zsh)" "$USER"
    log_if_failed "could not set default shell to zsh"
}

# Install packages for RHEL systems.
install_rhel_packages() {
    local dnf_packages=(
        trash-cli
        ripgrep
        git
        gcc
        make
        zsh
        wget
        curl
        htop
	stow
        neovim
    )

    if [ -z "${DISABLE_TMUX+x}" ]; then
        dnf_packages+=(tmux)
    fi

    sudo dnf update && \
    sudo dnf install -y "${dnf_packages[@]}"
    log_if_failed "failed installing packages"

    sudo chsh -s "$(which zsh)" "$USER"
    log_if_failed "could not set default shell to zsh"
}
#
# Install packages for macOS systems.
install_macos_packages() {
    log_info "Installing packages for macOS..."
    
    # Check if Homebrew is installed
    if ! command -v brew &>/dev/null; then
        log_info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        die_on_error "failed to install Homebrew"
    fi

    local brew_packages=(
        trash-cli
        ripgrep
        wget
        htop
        stow
        neovim
    )
    
    if [ -z "${DISABLE_TMUX+x}" ]; then
        brew_packages+=(tmux)
    fi

    brew update && \
    brew install "${brew_packages[@]}"
    log_if_failed "failed installing packages"

    # macOS requires additional steps to change the default shell
    if [[ "$SHELL" != *"zsh"* ]]; then
        log_info "Setting zsh as default shell..."
        chsh -s "$(which zsh)"
        log_if_failed "could not set default shell to zsh"
    fi
}

# Install OMZ
install_omz() {
    if [ ! -d "$OMZ_PATH" ]; then
        log_info "Installing OMZ..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        die_on_error "omz failed"
    else
        log_info "Updating OMZ..."
        "$OMZ_PATH/tools/upgrade.sh"
        log_if_failed "omz failed"
    fi

    # Install plugins
    local plugins_path="$OMZ_PATH/custom/plugins/"
    local themes_path="$OMZ_PATH/custom/themes/"

    clone_or_pull "https://github.com/zsh-users/zsh-autosuggestions.git" "$plugins_path/zsh-autosuggestions"
    clone_or_pull "https://github.com/zsh-users/zsh-syntax-highlighting.git" "$plugins_path/zsh-syntax-highlighting"
    clone_or_pull "https://github.com/jeffreytse/zsh-vi-mode" "$plugins_path/zsh-vi-mode"
    clone_or_pull "https://github.com/romkatv/powerlevel10k.git" "$themes_path/powerlevel10k"
}

# Install tmux plugins manager
install_tpm() {
    if [ ! -d "$TPM_PATH" ]; then
        log_info "Installing TPM..."
        git clone https://github.com/tmux-plugins/tpm "$TPM_PATH"
        die_on_error "tpm failed"
    else
        log_info "TPM already installed. Updating..."
        (cd "$TPM_PATH" && git pull)
        log_if_failed "tpm update failed"
    fi
}

# Install fzf
install_fzf() {
    if ! command -v fzf &>/dev/null; then
        log_info "Installing fzf from source..."

        git clone --depth 1 https://github.com/junegunn/fzf.git "$FZF_PATH" && \
            "$FZF_PATH/install" --all && \
            eval "$(fzf --zsh)" && \
            eval "$(fzf --bash)"

        log_if_failed "fzf failed"

        hash -r

    elif [ -d "$FZF_PATH" ]; then
        log_info "Updating fzf from sources..."

        cd "$FZF_PATH" && git pull && \
            "$FZF_PATH/install" --all && \
            eval "$(fzf --zsh)" && \
            eval "$(fzf --bash)"

        log_if_failed "fzf update failed"

    else
        log_warn "Could not update fzf. Probably was installed using the package manager. Update manually."
    fi
}

# Install kitty
install_kitty() {
    if ! command -v kitty &> /dev/null; then
        log_info "Installing kitty..."
        
        # Basic kitty installation (works on both macOS and Linux)
        curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin launch=n
        log_if_failed "installing kitty failed"
        
        if [[ "$(uname -s)" == "Linux" ]]; then
            # Create symbolic links to add kitty and kitten to PATH (assuming ~/.local/bin is in
            # your system-wide PATH)
            ln -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten ~/.local/bin/

            # Place the kitty.desktop file somewhere it can be found by the OS
            cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/

            # If you want to open text files and images in kitty via your file manager also add the kitty-open.desktop file
            cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/

            # Update the paths to the kitty and its icon in the kitty desktop file(s)
            sed -i "s|Icon=kitty|Icon=$(readlink -f ~)/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
            sed -i "s|Exec=kitty|Exec=$(readlink -f ~)/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop

            # Make xdg-terminal-exec (and hence desktop environments that support it use kitty)
            echo 'kitty.desktop' > ~/.config/xdg-terminals.list
            
            log_info "Setting default terminal to kitty..."
            if command -v update-alternatives &>/dev/null; then
                sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/bin/kitty 50
                log_if_failed "error setting default terminal"
            fi

            if command -v gnome-shell &>/dev/null; then
                log_info "Setting GNOME default terminal to kitty..."
                gsettings set org.gnome.desktop.default-applications.terminal exec 'env -u WAYLAND_DISPLAY x-terminal-emulator'
            fi
        fi
    else
        log_info "Kitty already installed. Updating..."
        curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin launch=n
        log_if_failed "kitty update failed"
    fi
}

# Install NERD Fonts
install_fonts() {
    local fonts=(
        UbuntuMono/Regular/UbuntuMonoNerdFont-Regular.ttf
        UbuntuMono/Regular/UbuntuMonoNerdFontMono-Regular.ttf
        UbuntuMono/Regular/UbuntuMonoNerdFontPropo-Regular.ttf
        UbuntuMono/Bold-Italic/UbuntuMonoNerdFont-BoldItalic.ttf
        UbuntuMono/Bold-Italic/UbuntuMonoNerdFontMono-BoldItalic.ttf
        UbuntuMono/Bold-Italic/UbuntuMonoNerdFontPropo-BoldItalic.ttf
        UbuntuMono/Bold/UbuntuMonoNerdFont-Bold.ttf
        UbuntuMono/Bold/UbuntuMonoNerdFontMono-Bold.ttf
        UbuntuMono/Bold/UbuntuMonoNerdFontPropo-Bold.ttf
        UbuntuMono/Regular-Italic/UbuntuMonoNerdFont-Italic.ttf
        UbuntuMono/Regular-Italic/UbuntuMonoNerdFontMono-Italic.ttf
        UbuntuMono/Regular-Italic/UbuntuMonoNerdFontPropo-Italic.ttf
    )
    local font_name

    log_info "Installing fonts to $FONTS_PATH"
    mkdir -p "$FONTS_PATH"
    
    # Create a temporary directory for downloading fonts
    local temp_dir=$(mktemp -d)
    pushd "$temp_dir" || die_on_error "Failed to change to temp directory"

    for font in "${fonts[@]}"; do
        font_name=$(basename "$font")

        if [ ! -f "$FONTS_PATH/$font_name" ]; then
            log_info "Downloading $font_name"
            curl -fLO "https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/$font"
            
            if [ $? -eq 0 ]; then
                # Move the downloaded font to fonts directory
                mv "$font_name" "$FONTS_PATH/"
                log_info "Installed $font_name"
            else
                log_error "Failed to download $font_name"
            fi
        else
            log_info "Font $font_name already installed"
        fi
    done

    popd
    
    # Clean up temp directory
    rm -rf "$temp_dir"
    
    # On macOS, clear font cache
    if [[ "$(uname -s)" == "Darwin" ]]; then
        log_info "Clearing macOS font cache"
        atsutil databases -remove
        log_if_failed "Failed to clear font cache"
    fi
}

install_dotfiles() {
    if [ ! -d "$DOTFILES_PATH" ]; then
        log_info "Installing dotfiles..."
        git clone --recurse-submodules $DOTFILES_REPO "$DOTFILES_PATH"
        die_on_error "Failed to clone dotfiles"
    else
        log_info "Updating dotfiles..."
        cd "$DOTFILES_PATH" && git pull --rebase --autostash && git submodule update --init --recursive
        log_if_failed "Updating dotfiles failed"
    fi

    cd "$DOTFILES_PATH" || log_if_failed "Something went wrong... Could not access $DOTFILES_PATH"
    
    # Define OS-specific directories
    local macos_only=(
        "yabai"
    )
    local linux_only=(
        "ags"
        "hypr"
    )

    log_info "Installing new dotfiles"
    for dir in *; do
        if [ -f "$dir" ]; then 
            # Only directories
            continue
        fi

        # Skip Linux-only dirs on macOS
        if [[ "$(uname -s)" == "Darwin" ]] && [[ " ${linux_only[@]} " =~ " ${dir} " ]]; then
            log_debug "Skipping Linux-only directory: $dir"
            continue
        fi
        # Skip macOS-only dirs on Linux
        if [[ "$(uname -s)" == "Linux" ]] && [[ " ${macos_only[@]} " =~ " ${dir} " ]]; then
            log_debug "Skipping macOS-only directory: $dir"
            continue
        fi

        log_info "stow $dir"
        stow -D "$dir"
        stow --adopt "$dir"
    done

    if [ -z "${DISABLE_TMUX+x}" ]; then
        # Update tmux plugins
        log_info "Updating tmux plugins"
        "$TPM_PATH"/tpm && \
        "$TPM_PATH"/scripts/install_plugins.sh
    fi
}

main() {
    if [[ "$(uname -s)" == "Darwin" ]]; then
        # First check if we're on macOS
        install_macos_packages
    elif [[ -f /etc/os-release ]]; then
        # For Linux distributions, use os-release
        source /etc/os-release
        if [ "$ID" == "ubuntu" ]; then
            install_ubuntu_packages
        elif [ "$ID" == "almalinux" ] || [ "$ID" == "rhel" ] || [ "$ID" == "fedora" ]; then
            install_rhel_packages
        else
            log_warn "Linux distribution not supported! Install packages manually."
        fi
    else
        log_warn "Could not identify OS. Install system packages manually."
    fi

    install_omz
    if [ -z "${DISABLE_TMUX+x}" ]; then
        install_tpm
    fi
    install_fzf
    if [ -z "${DISABLE_KITTY+x}" ]; then
        install_kitty
    fi
    if [ -z "${DISABLE_FONTS+x}" ]; then
        install_fonts
    fi
    install_dotfiles
}

main
